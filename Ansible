-->ansible inventory is list of IP addresses of host servers.
-->playbook describes the entire work flow of our system
-->ansible is agent less, easy understand and write, push configuration and 
-->playbooks contains plays and plays contain tasks and task call modules
   handlers can be run by task and will run at the end.
MODULES
---------
Package mgmt: yum apt
Remote execution: shell command
Service mgmt: service
File handling: copy template
SCM: bzr, git, subversion


$ansible all -m ping
$ansible all -a "ls -ls /home/ansible"
$sudo or ansible all -s -a "cat /var/log/messeges"
$ansible centos -m copy -a "src=test.txt dest=/tmp/test.txt "
$ansible ubuntu -s -m apt -a "name=elinks state=latest"
$ansible centos -s -m user -a "name=test"
$ansible centos -s -m user -a "name=test state=absent"
$ansible all -a "/bin/true"
$ansible all --list-hosts
$cat /etc/ansible/hosts
$ansible centos -m setup -a 'filter=*ipv4*'
$ansible centos -m setup | grep ipv4
$ansible centos -m setup --tree facts
$ansible centos -m setup -a 'filter=ansible_domain'
$ansible-playbook "playbookname(.yaml file)" ------> command to run playbook
$ansible-playbook "playbookname(.yaml file)" --extra-vars "myhosts=centos gather=yes pkg=telnet" ------> 
$yum install epel-release
=============================================================================================================================================
PLAYBOOKS STRUCTURE
---------------------
--- # This is a structural YAMLexamples to install HTTPD on CENTOS 
- hosts: centos
  remote_user: ansible
  become: yes
  become_method: sudo
  connection: ssh
  gather_facts: yes
  vars:
    username: myuser
  tasks:
  - name: install HTTPD on CENTOS 7 Nodes
    yum:
     name: httpd
     state: latest
    notify:
    - start serrvice
  handlers:
  - name: start service
    service:
      name: httpd
      state: restarted
------------------------------------------------------------------------------------------------------------------------------------------      
PLAYBOOK STRUCTURE FOR VARIABLES
---------------------------------
--- # Testing how vaibles work in the vars section of a playbook
- hosts: '{ myhosts }'
  remote_user: ansible
  become: yes
  become_method: sudo
  connection: ssh
  gather_facts: '{{ gather }}'
  vars: 
    myhosts: centos
    gather: yes
    pkg: telnet
  tasks:
  - name: install the indicated software
    yum:
     name: '{{ pkg }}'
     state: latest
------------------------------------------------------------------------------------------------------------------------------------------     
PLAYBOOK STRUCTURE FOR DEBUG STATEMENT
---------------------------------------
--- # Testing how vaibles work in the vars section of a playbook
- hosts: '{ myhosts }'
  remote_user: ansible
  become: yes
  become_method: sudo
  connection: ssh
  gather_facts: '{{ gather }}'
  vars: 
    myhosts: centos
    gather: yes
    pkg: telnet
  tasks:
  - name: installing telnet package
    yum:
     name: '{{ pkg }}'
     state: latest
    register: result
  - debug: var=result   
------------------------------------------------------------------------------------------------------------------------------------------
PLAYBOOK STRUCTURE FOR NOTIFICATION AND HANDLERS
---------------------------------------------------

--- # Notification and Handlers 
- hosts: centos
  remote_user: ansible
  become: yes
  become_method: sudo
  connection: ssh
  gather_facts: yes
  tasks:
  - name: install ngnix web server
    yum:
     name: ngnix
     state: latest
    notify:
    - enable and start the ngnix service
  handlers:
  - name: enable and start the ngnix service
    service:
      name: ngnix
      enabled: yes
      state: restarted
-------------------------------------------------------------------------------------------------------------------------------------------

PLAYBOOK FOR INSTALLING APACHE, PHP AND MYSQL
------------------------------------------------
---
-name: isntalling apache and php and mysql
 hosts: node/server name
 become: true
 become_user: root
 gather_fact: true
 task:
    -name: "installing apache2"
     package: name=apache2 state=present
    -name: "installing apache2-php5" 
     package: name=liapache2-mod-php state=present
    -name: "install php-cli"
     package: name=php-cli state=present
    -name: "install php-mcrypt"
     package: name=php-mcrypt state=present
    -name: "install php-mysql" 
     package: name=php-mysql state=present
    -name: "install mysql" 
     package: name=mysql-server state=present
 -------------------------------------------------------------------------------------------------------------------------------------------

---
-hosts: all
 remote-user: root
 task:
  -name: install pip
   apt: name=python-pip state=present
  -name: install "libmysqlclient-dev" 
   apt: name=libmysqlclient-dev state=present
  -name: install the python MYSQLB module
   pip: name=MYSQL-python
  -name: create database user edureka
   mysql_user: user=edureka password=edureka priv=*.*:ALL state=present
  -name: create DB edu
   mysql_db: db=edu state=present
  -name: create a table reg
   command: mysql -u edureka pedureka -e 'CREATE TABLE reg {name varchar(30)}, {email varchar(30)};' edu
   ----------------------------------------------------------------------------------------------------------------------------------------
---
-name: copy
 hosts: node/servername
 become: true
 become_user: root
 gather_facts: true
 tasks:
   - name: copy file
     copy: src=source of the file(.html) dest=destination of the file(.html)
   - name: copy file
     copy: src=source of the file(.php) dest=destination of the file(.php)
   - name: copy file
     copy: src=source of the file(.php) dest=destination of the file(.php)
 ------------------------------------------------------------------------------------------------------------------------------------------
 
  
  
  
